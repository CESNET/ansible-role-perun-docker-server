{{ ansible_managed | comment }}

jdbc.driver=org.postgresql.Driver
jdbc.url={{ perun_postgresql_jdbc_url }}
jdbc.username=perun
jdbc.password={{ perun_postgresql_db_user_password }}

# HikariCP suggest to match number of connections with number of CPUs available.
# minimumIdle means that number unused connections will be maintained all the time
# Max. should be below DB limit (which is {{ perun_postgresql_settings.max_connections }} on this machine).
jdbc.maximumPoolSize={{ perun_postgresql_db_maximumPoolSize }}
jdbc.minimumIdle={{ perun_postgresql_db_minimumIdle }}

# How long Perun waits for connection from the pool before exception is thrown. Value is in millis.
# Our default is 5 minutes / Hikari default is 30s
jdbc.connectionTimeout=300000

# How long we keep one connection in the pool before eviction. Value is in millis.
# Currently used connection are evicted only after returning to the pool if they exceeded the limit.
# Must be below any DB or infrastructure limit.
# Hikari default is 30 minutes.
jdbc.maxLifetime={{ perun_postgresql_db_maxLifetime }}

# How long we keep idle connections in the pool before eviction.
# Must be several seconds below maxLifetime.
# Hikari default is 10 minutes.
jdbc.idleTimeout={{ perun_postgresql_db_idleTimeout }}

# Log connections which are stuck in the process of closing and before their returning to the pool for specified time.
# Value is in millis.
# Hikari default is 0 (disabled), our default is 30 seconds
jdbc.leakDetectionThreshold={{ perun_postgresql_db_leakDetectionThreshold }}
