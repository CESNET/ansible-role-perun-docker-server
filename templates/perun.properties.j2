{{ ansible_managed | comment }}

# Perun administrators
perun.admins = {{ (perun_rpc_admins+perun_rpc_additional_admins)|join(', ') }}

# Principals for the Engines
perun.engine.principals = {{ perun_rpc_engine_principals|join(', ') }}

# Principals for the Registrar
perun.registrar.principals =

# Principals for the Notificator
perun.notification.principals = perunNotifications

# Principal for the RPC
perun.rpc.principal = perunRpc

# Do not lookup users for these logins
perun.dont.lookup.users={{ perun_rpc_dont_lookup_users|join(', ') }}

# Default group synchronization interval in fold of 5 minutes
perun.group.synchronization.interval = {{ perun_rpc_group_sync_interval }}

# Timeout for group synchronization in minutes
perun.group.synchronization.timeout = {{ perun_rpc_group_sync_timeout }}

# Timeout for group structure synchronization in minutes
perun.group.structure.synchronization.timeout={{ perun_rpc_group_structure_sync_timeout }}

# Limit on number of concurrently running synchronizations (default 10)
perun.group.maxConcurentGroupsToSynchronize={{ perun_rpc_group_maxConcurentGroupsToSynchronize }}

# Users who can do delegation
perun.rpc.powerusers = {{ perun_rpc_powerusers }}

# Perun DB Name
perun.perun.db.name = perun

# Perun RT URL
perun.rt.url = {{ perun_rpc_rt_url }}
perun.rt.defaultQueue={{ perun_rpc_rt_defaultQueue }}

# Perun service user for RT tickets
perun.rt.serviceuser.username = {{ perun_rpc_rt_serviceuser_username }}

# Perun service user for RT tickets
perun.rt.serviceuser.password = {{ perun_rpc_rt_serviceuser_password }}

{% if perun_rpc_rt_sendToMail is defined and perun_rpc_rt_sendToMail %}
# all RT tickets will be sent to this address as mails (we won't call RT API)
perun.rt.sendToMail = {{ perun_rpc_rt_sendToMail }}
{% endif %}

# Program which ensures password changes
perun.passwordManager.program = {{ perun_rpc_passwordManager_program }}

# Program which ensures alternative password creation
perun.alternativePasswordManager.program = {{ perun_rpc_alternativePasswordManager_program }}

# Peruns reCaptcha private key
perun.recaptcha.privatekey = {{ perun_rpc_recaptcha_privatekey }}

# Perun properties for email validation message
perun.mailchange.secretKey = {{ perun_rpc_mailchange_secretKey }}
perun.mailchange.backupFrom = {{ perun_rpc_mailchange_backupFrom }}
perun.mailchange.validationWindow = {{ perun_rpc_mailchange_validationWindow }}

perun.native.language = {{ perun_rpc_native_language }}

# Perun properties for non-authz password reset (min. ASCII 16 chars/bytes for AES 128
perun.pwdreset.secretKey = {{ perun_rpc_pwdreset_secret_key }}
# Use only hexa characters (0-F) , min. 16 chars/bytes for AES 128
perun.pwdreset.initVector = {{ perun_rpc_pwdreset_init_vector }}
# Password reset validity window (in hours)
perun.pwdreset.validationWindow = {{ perun_rpc_pwdreset_validationWindow }}

# Account activation validity window (in hours)
perun.accountActivation.validationWindow = {{ perun_rpc_accountActivation_validationWindow }}

{% if perun_rpc_loginNamespace_generated is defined %}
# List of login-namespaces which will have value automatically generated from users name.
perun.loginNamespace.generated={{ perun_rpc_loginNamespace_generated | join(',') }}
{% endif %}

# Set true if perun DB connection should be read only (item is optional, default is false)
perun.readOnlyPerun=false

# Set true if Perun should update DB version when new version of code is present (item is optional, defualt is false).
perun.DBInitializatorEnabled={{ perun_rpc_db_initializator_enabled|bool|to_json }}

# Perun instance name
perun.instanceName = {{ perun_rpc_instance_name }}

# Perun instance
perun.instanceId = {{ perun_rpc_instance_id }}

{% if perun_rpc_pdf_font_path is defined %}
# PDF font path for password reset
perun.pdfFontPath={{ perun_rpc_pdf_font_path }}
{% endif %}

# set which user ext sources are non removable. Ext sources are divided by ';' if only extsource name is present all user extsources are non removable.
# If ',' character is present, everything after is considered as regex and applied to user login in ext. source (such logins/dentities are then non removable).
# Example:   ExtSourceName1;ExtSourceName2,regex2;ExtSourceName3
perun.userExtSources.persistent={{ perun_rpc_userExtSources_persistent }}

{% if perun_rpc_id_salt is defined %}
# Perun ID salt for login-namespace:kypo
perun.id.salt={{ perun_rpc_id_salt }}
{% endif %}

# Comma separated list of entityIDs of proxy IdPs which is infront of Perun. So Perun can work with them differently.
perun.proxyIdPs={{ perun_rpc_proxy_idps }}

{% if perun_rpc_attributesForUpdate_idp is defined %}
# IdP/Cert Attributes to update in PERUN
perun.attributesForUpdate.idp={{ perun_rpc_attributesForUpdate_idp | join(',') }}
{% endif %}

{% if perun_rpc_cors_domains %}
# Comma separated names of allowed CORS domains
perun.allowedCorsDomains={{ perun_rpc_cors_domains | join(',') }}
{% endif %}

# OIDC
perun.oidc.issuers={% for issuer in perun_rpc_oidc_issuers %}o{{ loop.index }}{% if not loop.last %},{% endif %}{% endfor %}

{% for issuer in perun_rpc_oidc_issuers %}
perun.oidc.o{{ loop.index }}.iss={{ issuer.iss }}
perun.oidc.o{{ loop.index }}.extsource.name={{ issuer.extsource_name }}
perun.oidc.o{{ loop.index }}.extsource.type={{ issuer.extsource_type }}
{% endfor %}

# SMTP configuration
mail.smtp.host=perun-host
mail.smtp.port=25
#mail.smtp.auth=false
#mail.smtp.starttls.enable=false
#mail.debug=false
#perun.smtp.user=
#perun.smtp.pass=

# Enable sending generic notifications
notif.sendMessages={{ perun_rpc_notif_send_messages }}

# For which login-namespaces will perun auto-create necessary attributes (comma separated list)
perun.autocreatedNamespaces=

# Default JDBC query timeout for each preparedStatement (in seconds). Set to -1 for unlimited.
# perun.queryTimeout=-1

# Name of ExtSources with support for multiple identifiers
perun.extsources.multiple.identifiers={{ perun_rpc_extsources_multiple_identifiers }}

# Try to lookup user by additional identifiers and if it is null, then lookup by user ext source name and login
perun.lookup.user.by.identifiers.and.extSourceLogin={{ perun_rpc_lookup_user_by_identifiers_and_extSourceLogin }}

# Enable user deletion (and associated blocking of user's logins) or use the default anonymization of user instead
perun.user.deletion.forced={{ perun_rpc_user_deletion_forced }}

# Require consents throughout Perun
perun.force.consents={{ perun_rpc_force_consents }}

# If the call to user info endpoint should be made (on OIDC) when creating PerunPrincipal
perun.requestUserInfoEndpoint={{ perun_rpc_requestUserInfoEndpoint }}

perun.defaultLoa.idp={{ perun_rpc_defaultLoa_idp }}

{% if perun_rpc_group_nameSecondaryRegex is defined %}
# Secondary regexes to limit group names
perun.group.nameSecondaryRegex={{ perun_rpc_group_nameSecondaryRegex }}
{% endif %}
{% if perun_rpc_group_fullNameSecondaryRegex is defined %}
perun.group.fullNameSecondaryRegex={{ perun_rpc_group_fullNameSecondaryRegex }}
{% endif %}

# List of attributes URNs by which we search users/members (it can be user/member/ues attributes)
perun.attributesToSearchUsersAndMembersBy={{ perun_rpc_attributesToSearchUsersAndMembersBy|join(',') }}

# List of user attributes URNs that should be anonymized during user's anonymization
perun.attributesToAnonymize={{ perun_rpc_attributesToAnonymize|join(',') }}

# List of user attributes URNs that should be kept without change during user's anonymization
perun.attributesToKeep={{ perun_rpc_attributesToKeep|join(',') }}

# When set to true, notifications about account linking are send to afffected user
perun.sendIdentityAlerts={{ perun_rpc_sendIdentityAlerts }}

# When set to true, finding of similar users will not be triggered during registrar initialization.
# Therefore, account linking will not be offered to users even when they already have registered some similar accounts.
perun.findSimilarUsersDisabled={{ perun_rpc_registrar_findSimilarUsers_disabled }}

# names of the property in userInfo that could contain extSourceLogin
perun.userInfoEndpoint.extSourceLogin={{ perun_rpc_userInfoEndpoint_extSourceLogin }}

# name of the property in userInfo that could contain extSourceName
perun.userInfoEndpoint.extSourceName={{ perun_rpc_userInfoEndpoint_extSourceName }}

# properties that are path in the userInfo to the extSourceFriendlyName
perun.userInfoEndpoint.extSourceFriendlyName={{ perun_rpc_userInfoEndpoint_extSourceFriendlyName }}

# timeout limit (hours) for the MFA to be valid (timestamp cannot be older than the limit)
perun.introspectionEndpoint.mfaAuthTimeout={{ perun_rpc_introspectionEndpoint_mfaAuthTimeout }}

# expected acr value to be returned from introspection endpoint if MFA was performed
perun.introspectionEndpoint.mfaAcrValue={{ perun_rpc_introspectionEndpoint_mfaAcrValue }}

# when set to true, MFA is required for critical operations and attribute actions
perun.enforceMfa={{ perun_rpc_enforceMfa }}

# how many months is lastAccess of user IdP extSource valid for attributes retrieval
perun.idpLoginValidity={{ perun_rpc_idpLoginValidity }}

# which virtual attributes should skip lastAccess check of user's IdP extsources
perun.idpLoginValidityExceptions={{ perun_rpc_idpLoginValidityExceptions|join(',') }}
