---
# A list of Perun roles that are loaded to the database
#
# PERUNADMIN role can perform all the actions possible in the Perun system.
# It is the only role that is able to also set this role to other users.
#
# PERUNOBSERVER role has access to all the information, but it is not able to perform any changes.
# The role can be set only by Perun administrators.
#
# VOADMIN role has full control over a virtual organization that is associated with the role.
# It can create, set up and manage groups in the VO, assign groups and services to resources, set up external
# sources for the VO, define rules for VO membership, and set up registration sheet for the VO.
# VO administrators are able to set up roles associated with the Vo: other VO administrators, Resource administrators,
# Group administrators, Top group creators, Resource self-service, and Sponsor roles.
# The VO administrator role may be set to users or groups of users by other VO administrators or Perun administrators.
#
# GROUPADMIN role can create subgroups for the group which is associated with this role
# and add members to the group and its subgroups. Users with this role are also able to send group invitations
# to other VO members, and to create a registration sheet for group membership. The role may be set
# to users or groups of users by Perun administrators, VO administrators, and other Group administrators.
#
# SELF role is a user’s primary role through which the user is able to read and to change
# only their personal information. It is assigned to all the authenticated users and cannot be removed.
#
# FACILITYADMIN role has complete control over a facility that is associated with the role.
# For example, Facility administrators have a right to create facility resources, to set up attributes and destinations
# for services, or to propagate these services. This role may be set by a Perun administrator
# or by another facility administrator associated with the same facility.
# Moreover, the role can also be assigned to a single user or a group of users.
#
# RESOURCEADMIN role can assign groups to and remove them from the resources with which this role is connected.
# The group and the resource have to be in the same VO in order to make an assignment or to remove it.
# Resource administrators, VO administrators, and Perun administrators are able to set this role
# to other users or groups of users.
#
# RESOURCESELFSERVICE has the same privileges as the Resource administrator role,
# but users with this role are able to manage group on resources only when they are Group administrators for that group.
# VO administrators, Perun administrators, and Resource administrators are allowed to assign this role
# to users or groups of users. However, a user with Resource self-service role cannot delegate this role further.
#
# REGISTRAR is a system role that belongs to the Registration module. It is allowed to perform actions
# that are connected to users’ registrations and to creating and changing users’ passwords.
# It cannot be managed by other roles.
#
# ENGINE is another system role that represents the Engine component. This role is authorized to take actions
# connected with users’ propagations to services. Same as the role RPC, this role cannot be managed by other roles.
#
# RPC is a system role, which allows the RPC component to call the API and thus transfer outer API parameters
# into objects. Perun does not provide an explicit functionality for managing system roles.
# Therefore, it is not possible to manage this role by any other role.
#
# NOTIFICATIONS role does not have any special privileges. Its purpose is to identify whether
# the Notification module is calling the core API. It is a system role; therefore, it cannot be assigned to anyone.
#
# SERVICEUSER is a role that can be assigned to a certain process, service, or user.
# It is a sign of an account with a Self role being created by someone else.
# The only role with privileges to create a Service user is the Perun administrator role.
#
# SPONSOR users or groups of a VO can provide other users with VO membership even without them passing the VO registration.
# The sponsor role may be assigned to users or groups of users by VO administrators or Perun administrators.
# However, Sponsors are not allowed to delegate this role to other users or groups.
#
# VOOBSERVER can see everything that VO admin sees, but the observer is not able to perform any changes in the VO.
# Roles which have a right to set this role are Perun administrator and VO administrator.
#
# TOPGROUPCREATOR role is able to create a new top-level group in a VO (a group which does not have a parent group)
# and to copy forms and emails from one group to another (within the same VO). This role can also be assigned to
# users and groups of users. The only roles which have a right to set this role are the Perun administrator and the
# VO administrator.
#
# SECURITYADMIN role has the privilege to put users on a blacklist in a facility. The blacklist is associated
# with a security team, and the team is associated with the facility. Security administrators are members
# of at least one security team, either directly, or indirectly as members of another group.
# Together with Perun administrators, they can add other administrators to the team.
#
# CABINETADMIN role is able to manage users’ publications in the cabinet module.
# Cabinet administrators and Perun administrators are able to delegate this role to other users,
# but the role cannot be set to groups.
#
# UNKNOWN exists, but it is not used in Perun.
#
# TRUSTEDFACILITYADMIN role can be assign to a user or a group in specific VO. Only VO administrator is able to set this
# role, but only in his own VO. User with role Trusted facility admin has privileges to assign group(s) to resource(s)
# and remove group(s) from resource(s), but only if the user has the role Facility Admin for the specific facility at
# the same time. In this case Trusted facility admin also has rights to set roles Resource admin and Resource self
# service.
#
perun_roles:
  {{ perun_roles | to_nice_yaml(indent=2) | trim | indent(2) }}

# A list of Perun policies that are loaded to the PerunPoliciesContainer.
#
# Name of each policy starts with method name (usually), continues with parameter's types (except PerunSession)
# and ends with "policy". Between each of these parts are underscores.
# In scenarios where one method needs more policies, or there are conflicts between policy names,
# optional word with a dash at the end can be used before the method name.
# Example: filter-getAllMembers_Group_policy
#
# Each policy is composed of two parts.
# The first one is called policy_roles, which contains privileged roles for this policy.
# The second one is include_policies which contains policies which add their policy_roles to this policy.
#
# The policy_roles is a list of maps, where the relation between list entries is logical OR
# and the relation between map entries is logical AND.
# Each map element contains role name as a key and object type as a value (value is optional).
# This specifies that a particular role has privileges in the policy with a connection to the type of object.
# The actual object (or objects) is then passed in the code where the evaluation is called.
# When there are passed more objects with the specified type, the principal has to have assigned a role to all of them.
# When there are provided no objects of the specified type, this "role: object type" entry will not be satisfied.
# Example: policy_roles:
#            - VOADMIN: Vo
#            - GROUPADMIN: Group
#              RESOURCEADMIN: Resource
#            - PERUNOBESRVER:
#
# Explanation: The list contains 3 elements. The first element contains a map with one entry,
# the second one with two, and the last one with one. It is enough to satisfy just one element in the list.
# The first map contains one entry where the key is VOADMIN, and the object type is Vo.
# Meaning that to satisfy this entry, the principal has to have role VOADMIN connected with object type Vo,
# where the actual object is passed in the code.
# The second map contains two entries, therefore to satisfy this map, the principal has to be GROUPADMIN on a group
# and RESOURCEADMIN on a resource.
# The last map contains one entry specifying that the principal has to have role PERUNOBSERVER
# but without the connection with any object.
#
# The include_policies is a list of policy names that will be included in the policy.
# Relation between the policy and its included policies is logical OR.
# Meaning that to satisfy the policy, it is enough to either satisfy policy_roles in the policy
# or to satisfy policy_roles for at least one of the included policies.
# Most of the policies are including default_policy, which contains PERUNADMIN's privileges.
# Example: include_policies:
#            - default_policy
#            - getAllVos_policy
#
perun_policies:
  {{ perun_policies | to_nice_yaml(indent=2) | trim | indent(2) }}

# A list of Perun management rules that are loaded to the PerunPoliciesContainer.
#  primary_object serves to determine with which object is the role primarily connected. Other objects are just complementary.
#  assign_to_objects is a map of objects which can be assigned with the role. Key is a object name and value is mapping to the database.
#             Example entry: key: Resource; value: resource_id
#  assignment_check is a list of maps defining which of the assigned objects should be checked for being critical (requiring MFA) when setting the role.
#             Example entry: key: MFA; value: Resource <- If resource is critical, MFA is required
#             Example entry: {} <- No MFA is required to set this role
#             Example entry: Key: MFA; value: <- No value means MFA is always required to set this role
#  entities_to_manage is a map of entities which can be set to the role. Key is a entity name and value is mapping to the database.
#             Example entry: key: User; value: user_id
#  privileged_roles_to_manage serves to determine which roles (in relation to which objects) a user/group has to have, to have rights to set/unset the role to other users/groups.
#             It is a list of maps where each map entry consists from a role name as a key and a role object as a value.
#             Relation between each map in the list is logical OR and relation between each entry in the map is logical AND.
#             Example map - key: VOADMIN ; value: Vo
#                           key: GROUPADMIN ; value: Group
#  privileged_roles_to_read is same as the privileged_roles_to_manage, but its purpose is to determine which roles have rights to read the roleName.
#  associated_read_roles is a list of related roles which are authorized to read attribute value if the main role is authorized.
#             Example list for groupadmin role - value: [GROUPOBSERVER]
#  assignable_to_attributes is a flag that determines whether the role can appear in attribute policies.
#  mfa_critical_role is a flag marking roles always requiring MFA from users having that role
#  skip_mfa is a flag that whether the role should skip MFA check.
#  display_name is a more user-friendly name
#  receive_notifications contains names of objects for which the role should get notifications
# 			   Example value: Vo ; meaning: will receive notifications when vo application is created/failed
perun_roles_management:
  {{ perun_roles_management | to_nice_yaml(indent=2) | trim | indent(2) }}
...
