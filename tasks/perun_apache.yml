- name: "create /etc/perun/apache/sites-enabled directory"
  file:
    path: /etc/perun/apache/sites-enabled
    state: directory

- name: "create /etc/perun/apache/maintenance directory"
  file:
    path: /etc/perun/apache/maintenance
    state: directory

- name: "install prerequisite for htpasswd task"
  package:
    name: python-passlib
    state: present

- name: "add common passwords into /etc/perun/apache/perun.passwd"
  htpasswd:
    path: "/etc/perun/apache/perun.passwd"
    name: "{{ item.key }}"
    password: "{{ item.value }}"
    owner: root
    group: root
    mode: 0644
  loop: "{{ perun_apache_basicAuth_common|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  notify: "restart perun_apache"

- name: "add additional passwords into /etc/perun/apache/perun.passwd"
  htpasswd:
    path: "/etc/perun/apache/perun.passwd"
    name: "{{ item.key }}"
    password: "{{ item.value }}"
    owner: root
    group: root
    mode: 0644
  loop: "{{ perun_apache_basicAuth_additional|dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: "install HTML pages for maintenance (contain perun_email {{ perun_email }})"
  template:
    src: "{{ item }}"
    dest: /etc/perun/apache/maintenance/
    mode: 0644
  with_fileglob:
    - "templates/maintenance/*"

- name: "create dir /etc/perun/apache/img for logo and other images"
  file:
    state: directory
    path: /etc/perun/apache/img
    mode: '0755'

- name: "copy logo and other images"
  copy:
    src: "{{ item }}"
    dest: /etc/perun/apache/img
  with_fileglob:
    - "{{ perun_instance_hostname }}/img/*"

- name: "detect local instanceConfig.json"
  local_action:
    module: stat
    path: "files/{{ perun_instance_hostname }}/admin-gui-instanceConfig.json"
  register: ic

- name: "create /etc/perun/apache/instanceConfig.json"
  when: ic.stat.exists
  copy:
    src: "{{ ic.stat.path}}"
    dest: /etc/perun/apache/instanceConfig.json

- name: "create /etc/perun/apache/sites-enabled/000-perun.conf"
  template:
    src: perun.conf.j2
    dest: /etc/perun/apache/sites-enabled/000-perun.conf
    owner: root
    group: root
    mode: '0400'
  notify: "restart perun_apache"

- name: "create /etc/perun/apache/sites-enabled/perun-ngui.conf"
  when: perun_rpc_oidc_issuers is defined and perun_rpc_oidc_issuers
  template:
    src: perun-ngui.conf.j2
    dest: /etc/perun/apache/sites-enabled/perun-ngui.conf
    owner: root
    group: root
    mode: '0400'
  notify: "restart perun_apache"

- name: "set Kerberos keytab"
  copy:
    src: "{{ perun_instance_hostname }}/krb5.http.keytab"
    dest: "/etc/perun/apache/krb5.http.keytab"
    owner: root
    group: root
    mode: 0400
  when:  perun_apache_kerberos_enabled

- name: "create /etc/perun/apache/shibboleth directory"
  file:
    path: /etc/perun/apache/shibboleth
    state: directory

- name: "create symbolic link /etc/shibboleth"
  file:
    state: link
    src: /etc/perun/apache/shibboleth
    path: /etc/shibboleth

- name: "create attribute-map.xml"
  template:
    src:  attribute-map.xml.j2
    dest: /etc/perun/apache/shibboleth/attribute-map.xml
  notify: "restart perun_apache"

- name: "create attribute-policy.xml"
  template:
    src:  attribute-policy.xml.j2
    dest: /etc/perun/apache/shibboleth/attribute-policy.xml
  notify: "restart perun_apache"

- name: "create shibboleth2.xml"
  template:
    src:  shibboleth2.xml.j2
    dest: /etc/perun/apache/shibboleth/shibboleth2.xml
  notify: "restart perun_apache"

- name: "create sp-key.pem"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: /etc/perun/apache/shibboleth/sp-key.pem
    owner: _shibd
    group: _shibd
    mode: '0400'
  vars:
    findme:
      - "{{ perun_instance_hostname }}/sp-key.pem"
      - "sp-key.pem"

- name: "create sp-cert.pem"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: /etc/perun/apache/shibboleth/sp-cert.pem
    owner: _shibd
    group: _shibd
    mode: '0444'
  vars:
    findme:
      - "{{ perun_instance_hostname }}/sp-cert.pem"
      - "sp-cert.pem"

- name: "create additional files for Shibboleth"
  copy:
    src: "{{ item }}"
    dest: /etc/perun/apache/shibboleth/
    owner: root
    group: root
    mode: 0444
  with_fileglob:
    - "{{ perun_instance_hostname }}/shibboleth/*"
  notify: "restart perun_apache"

- name: "list normal apache mounts"
  set_fact:
    apache_mounts:
      - { type: volume, source: apache_logs, target: /var/log/apache2 }
      - { type: bind, source: /etc/perun/ssl, target: /etc/perun/ssl, read_only: yes }
      - { type: bind, source: /etc/perun/apache, target: /etc/perun/apache, read_only: yes }

- name: "add perun_apache_mounts_additional to apache mounts"
  when: perun_apache_mounts_additional|length > 0
  set_fact:
    apache_mounts: "{{ apache_mounts + perun_apache_mounts_additional }}"

- name: "add certbot dirs to apache mounts"
  when: perun_use_certbot_certificates
  set_fact:
    apache_mounts: "{{ apache_mounts + perun_certbot_mounts }}"

- name: "create Perun Apache container"
  docker_container:
    name: perun_apache
    image: "registry.gitlab.ics.muni.cz:443/perun/perun_docker/perun_apache:{{ perun_apache_container_version }}"
    pull: yes
    restart_policy: unless-stopped
    mounts: "{{ apache_mounts }}"
    networks_cli_compatible: yes
    networks:
      - name: perun_net
    ports:
      - 80:80
      - 443:443
  register: perun_apache_container

- name: "put container IP into /etc/hosts"
  lineinfile:
    dest: /etc/hosts
    regexp: 'perun_apache'
    line: "{{ perun_apache_container.container.NetworkSettings.Networks.perun_net.IPAddress }} perun_apache"
