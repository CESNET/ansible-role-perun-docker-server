- name: "install ssl-cert"
  apt:
    name: ssl-cert

- name: "create {{ perun_certs_dir }} directory"
  file:
    path: "{{ perun_certs_dir }}"
    state: directory

- name: "use certbot certificates"
  when: perun_use_certbot_certificates
  block:
    - name: "collect DNS names for multicert"
      loop: "{{ other_certs }}"
      loop_control:
        loop_var: cert_item
        label: "{{ cert_item.prefix }}"
      when: lookup('vars', cert_item.cond)
      set_fact:
        perun_certbot_alt_hostnames: "{{ perun_certbot_alt_hostnames + [ lookup('vars', cert_item.hostname) ] + lookup('vars', cert_item.aliases) }}"

    - name: "add rpc aliases for multicert"
      set_fact:
        perun_certbot_alt_hostnames: "{{ perun_certbot_alt_hostnames + perun_rpc_hostname_aliases }}"

    - name: "collected DNS names"
      debug:
        var: perun_certbot_alt_hostnames

    - name: "create certbot cert for all DNS names"
      include_role:
        name: cesnet.certbot_certs
        apply:
          tags: [ 'perun_certs' ]
      vars:
        certbot_certname: multi
        certbot_hostname: "{{ perun_rpc_hostname }}"
        certbot_alt_hostnames: "{{ perun_certbot_alt_hostnames }}"
        certbot_prehook: perun_prehook.sh
        certbot_posthook: perun_posthook.sh

    - name: "create link to host key"
      file:
        state: link
        src: "/etc/letsencrypt/live/multi/privkey.pem"
        dest: "{{ perun_certificate_key_file }}"
        force: yes
      notify:
        - "restart perun_apache"
        - "restart portainer"
        - "restart ldap"
        - "restart postgres"

    - name: "create link to host cert"
      file:
        state: link
        src: "/etc/letsencrypt/live/multi/cert.pem"
        dest: "{{ perun_certificate_file }}"
        force: yes

    - name: "create link to host chain"
      file:
        state: link
        src: "/etc/letsencrypt/live/multi/chain.pem"
        dest: "{{ perun_certificate_chain_file }}"
        force: yes

    - name: "create link to host full chain"
      file:
        state: link
        src: "/etc/letsencrypt/live/multi/fullchain.pem"
        dest: "{{ perun_certificate_fullchain_file }}"
        force: yes

    - name: "clean old links"
      block:
        - name: "clean old keys links"
          loop: "{{ ['ngui', 'profile', 'api'] | product(['key', 'cert', 'chain']) | list }}"
          loop_control:
            label: "{{ item[0] }}{{ item[1] }}.pem"
          file:
            state: absent
            path: "{{ perun_certs_dir }}/{{ item[0] }}{{ item[1] }}.pem"

- name: "use issued certificates"
  when: not perun_use_certbot_certificates
  block:
    - name: "set host key"
      copy:
        src: "{{ perun_instance_hostname }}/hostkey.pem"
        dest: "{{ perun_certificate_key_file }}"
        owner: root
        group: ssl-cert
        mode: 0640
      notify:
        - "restart perun_apache"
        - "restart portainer"
        - "restart ldap"
        - "restart postgres"

    - name: "set host certificate"
      copy:
        src: "{{ perun_instance_hostname }}/hostcert.pem"
        dest: "{{ perun_certificate_file}}"
        owner: root
        group: root
        mode: 0644
      register: certfile
      notify:
        - "restart perun_apache"
        - "restart ldap"
        - "restart postgres"

    - name: "set host chain"
      copy:
        src: "{{ perun_instance_hostname }}/hostchain.pem"
        dest: "{{ perun_certificate_chain_file }}"
        owner: root
        group: root
        mode: 0644
      notify:
        - "restart perun_apache"
        - "restart ldap"
        - "restart postgres"

    - name: "detect whether full chain is link"
      stat:
        path: "{{ perun_certificate_fullchain_file }}"
      register: fclnk

    - name: "unlink {{ perun_certificate_fullchain_file }}"
      file:
        state: absent
        path: "{{ perun_certificate_fullchain_file }}"
      when: fclnk.stat.exists and fclnk.stat.islnk

    - name: "assemble full chain (for portainer)"
      shell:
        chdir: "{{ perun_certs_dir }}"
        cmd: "cat {{ perun_certificate_file}} {{ perun_certificate_chain_file }} >{{ perun_certificate_fullchain_file }}"
      when: certfile.changed
      notify: "restart portainer"

    - name: "set other keys"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond) and not lookup('vars', item.same)
      copy:
        src: "{{ perun_instance_hostname }}/{{ 'host' if lookup('vars', item.same) else item.prefix }}key.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}key.pem"
        owner: root
        group: ssl-cert
        mode: 0640
      notify:
        - "restart perun_apache"

    - name: "set other certificates"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond) and not lookup('vars', item.same)
      copy:
        src: "{{ perun_instance_hostname }}/{{ 'host' if lookup('vars', item.same) else item.prefix }}cert.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}cert.pem"
        owner: root
        group: root
        mode: 0644
      notify:
        - "restart perun_apache"

    - name: "set other chains"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond) and not lookup('vars', item.same)
      copy:
        src: "{{ perun_instance_hostname }}/{{ 'host' if lookup('vars', item.same) else item.prefix }}chain.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}chain.pem"
        owner: root
        group: root
        mode: 0644
      notify:
        - "restart perun_apache"

    - name: "clean unnecessary old links"
      block:
        - name: "clean old links to keys"
          loop: "{{ other_certs }}"
          loop_control:
            label: "{{ item.prefix }}"
          when: lookup('vars', item.cond) and lookup('vars', item.same)
          file:
            path: "{{ perun_certs_dir }}/{{ item.prefix }}key.pem"
            state: absent

        - name: "clean old links to certs"
          loop: "{{ other_certs }}"
          loop_control:
            label: "{{ item.prefix }}"
          when: lookup('vars', item.cond) and lookup('vars', item.same)
          file:
            path: "{{ perun_certs_dir }}/{{ item.prefix }}cert.pem"
            state: absent

        - name: "clean old links to chains"
          loop: "{{ other_certs }}"
          loop_control:
            label: "{{ item.prefix }}"
          when: lookup('vars', item.cond) and lookup('vars', item.same)
          file:
            path: "{{ perun_certs_dir }}/{{ item.prefix }}chain.pem"
            state: absent

        - name: "clean renamed ngui to admin"
          loop: "{{ ['ngui' ] | product(['key', 'cert', 'chain']) | list }}"
          loop_control:
            label: "{{ item[0] }}{{ item[1] }}.pem"
          file:
            state: absent
            path: "{{ perun_certs_dir }}/{{ item[0] }}{{ item[1] }}.pem"

- name: "prereq for docker_container_info task"
  apt:
    name: python3-docker
    state: present

- name: "detect perun_apache existence for handler"
  docker_container_info:
    name: perun_apache
  ignore_errors: yes
  register: perun_apache_container

- name: "detect portainer existence for handler"
  docker_container_info:
    name: portainer
  ignore_errors: yes
  register: portainer_container
