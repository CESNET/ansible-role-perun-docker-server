- name: "install ssl-cert"
  apt:
    name: ssl-cert

- name: "create {{ perun_certs_dir }} directory"
  file:
    path: "{{ perun_certs_dir }}"
    state: directory

- set_fact:
    other_certs:
      - cond: perun_api_enabled
        hostname: perun_api_hostname
        prefix: api
        same: perun_api_tls_cert_same_as_host
      - cond: perun_ngui_enabled
        hostname: perun_ngui_admin_hostname
        prefix: ngui
        same: perun_ngui_admin_tls_cert_same_as_host
      - cond: perun_ngui_profile_enabled
        hostname: perun_ngui_profile_hostname
        prefix: profile
        same: perun_ngui_profile_tls_cert_same_as_host
      - cond: perun_ngui_pwdreset_enabled
        hostname: perun_ngui_pwdreset_hostname
        prefix: pwdreset
        same: perun_ngui_pwdreset_tls_cert_same_as_host
      - cond: perun_ngui_publications_enabled
        hostname: perun_ngui_publications_hostname
        prefix: pubs
        same: perun_ngui_publications_tls_cert_same_as_host

- name: "use certbot certificates"
  when: perun_use_certbot_certificates
  block:
    - name: "create certbot cert for  {{ perun_rpc_hostname }}"
      include_role:
        name: cesnet.certbot_certs
        apply:
          tags: [ 'perun_certs' ]
      vars:
        certbot_hostname: "{{ perun_rpc_hostname }}"
        certbot_prehook: perun_prehook.sh
        certbot_posthook: perun_posthook.sh


    - name: "create link to host key"
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ perun_rpc_hostname }}/privkey.pem"
        dest: "{{ perun_certificate_key_file }}"
        force: yes
      notify:
        - "restart perun_apache"
        - "restart portainer"
        - "restart ldap"
        - "restart postgres"

    - name: "create link to host cert"
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ perun_rpc_hostname }}/cert.pem"
        dest: "{{ perun_certificate_file }}"
        force: yes

    - name: "create link to host chain"
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ perun_rpc_hostname }}/chain.pem"
        dest: "{{ perun_certificate_chain_file }}"
        force: yes

    - name: "create link to host full chain"
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ perun_rpc_hostname }}/fullchain.pem"
        dest: "{{ perun_certificate_fullchain_file }}"
        force: yes

    - name: "create other certbot certs"
      loop: "{{ other_certs }}"
      loop_control:
        loop_var: cert_item
        label: "{{ cert_item.prefix }}"
      when: lookup('vars', cert_item.cond)
      include_role:
        name: cesnet.certbot_certs
        apply:
          tags: [ 'perun_certs' ]
      vars:
        certbot_hostname: "{{ lookup('vars', cert_item.hostname) }}"
        certbot_prehook: perun_prehook.sh
        certbot_posthook: perun_posthook.sh

    - name: "create links to keys"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond)
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ lookup('vars', item.hostname) }}/privkey.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}key.pem"
        force: yes

    - name: "create links to certs"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond)
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ lookup('vars', item.hostname) }}/cert.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}cert.pem"
        force: yes

    - name: "create links to chains"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond)
      file:
        state: link
        src: "/etc/letsencrypt/live/{{ lookup('vars', item.hostname) }}/chain.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}chain.pem"
        force: yes

- name: "use issued certificates"
  when: not perun_use_certbot_certificates
  block:
    - name: "set host key"
      copy:
        src: "{{ perun_instance_hostname }}/hostkey.pem"
        dest: "{{ perun_certificate_key_file }}"
        owner: root
        group: ssl-cert
        mode: 0640
      notify:
        - "restart perun_apache"
        - "restart portainer"
        - "restart ldap"
        - "restart postgres"

    - name: "set host certificate"
      copy:
        src: "{{ perun_instance_hostname }}/hostcert.pem"
        dest: "{{ perun_certificate_file}}"
        owner: root
        group: root
        mode: 0644
      register: certfile
      notify:
        - "restart perun_apache"
        - "restart ldap"
        - "restart postgres"

    - name: "set host chain"
      copy:
        src: "{{ perun_instance_hostname }}/hostchain.pem"
        dest: "{{ perun_certificate_chain_file }}"
        owner: root
        group: root
        mode: 0644
      notify:
        - "restart perun_apache"
        - "restart ldap"
        - "restart postgres"

    - name: "detect whether full chain is link"
      stat:
        path: "{{ perun_certificate_fullchain_file }}"
      register: fclnk

    - name: "unlink {{ perun_certificate_fullchain_file }}"
      file:
        state: absent
        path: "{{ perun_certificate_fullchain_file }}"
      when: fclnk.stat.exists and fclnk.stat.islnk

    - name: "assemble full chain (for portainer)"
      shell:
        chdir: "{{ perun_certs_dir }}"
        cmd: "cat {{ perun_certificate_file}} {{ perun_certificate_chain_file }} >{{ perun_certificate_fullchain_file }}"
      when: certfile.changed
      notify: "restart portainer"

    - name: "set other keys"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond)
      copy:
        src: "{{ perun_instance_hostname }}/{{ 'host' if lookup('vars', item.same) else item.prefix }}key.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}key.pem"
        owner: root
        group: ssl-cert
        mode: 0640
      notify:
        - "restart perun_apache"

    - name: "set other certificates"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond)
      copy:
        src: "{{ perun_instance_hostname }}/{{ 'host' if lookup('vars', item.same) else item.prefix }}cert.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}cert.pem"
        owner: root
        group: root
        mode: 0644
      notify:
        - "restart perun_apache"

    - name: "set other chains"
      loop: "{{ other_certs }}"
      loop_control:
        label: "{{ item.prefix }}"
      when: lookup('vars', item.cond)
      copy:
        src: "{{ perun_instance_hostname }}/{{ 'host' if lookup('vars', item.same) else item.prefix }}chain.pem"
        dest: "{{ perun_certs_dir }}/{{ item.prefix }}chain.pem"
        owner: root
        group: root
        mode: 0644
      notify:
        - "restart perun_apache"

- name: "prereq for docker_container_info task"
  apt:
    name: python3-docker
    state: present

- name: "detect perun_apache existence for handler"
  docker_container_info:
    name: perun_apache
  ignore_errors: yes
  register: perun_apache_container

- name: "detect portainer existence for handler"
  docker_container_info:
    name: portainer
  ignore_errors: yes
  register: portainer_container
