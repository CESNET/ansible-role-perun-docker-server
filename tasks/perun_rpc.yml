- name: "create jdbc.properties for RPC"
  template:
    src: jdbc.properties.j2
    dest: /etc/perun/rpc/jdbc.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'
  notify: "restart perun_rpc"

- name: "create perun-roles.yml for RPC"
  template:
    src: perun-roles.yml.j2
    dest: /etc/perun/rpc/perun-roles.yml
    owner: perunrpc
    group: perunrpc
    mode: '0440'

- name: "create perun-web-gui.properties"
  template:
    src: perun-web-gui.properties.j2
    dest: /etc/perun/rpc/perun-web-gui.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'
  notify: "restart perun_rpc"

- name: "create perun.properties for RPC"
  template:
    src: perun.properties.j2
    dest: /etc/perun/rpc/perun.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'
  notify: "restart perun_rpc"

- name: "create logback.xml"
  template:
    src: logback.xml.j2
    dest: /etc/perun/rpc/logback.xml
    owner: perunrpc
    group: perunrpc
    mode: '0440'

- name: "create perun-cabinet.properties"
  template:
    src: perun-cabinet.properties.j2
    dest: /etc/perun/rpc/perun-cabinet.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'

- name: "create perun-registrar-lib.properties"
  template:
    src: perun-registrar-lib.properties.j2
    dest: /etc/perun/rpc/perun-registrar-lib.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'

- name: "create perun-dispatcher.properties"
  template:
    src: perun-dispatcher.properties.j2
    dest: /etc/perun/rpc/perun-dispatcher.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'

- name: "create perun-notification.properties"
  template:
    src: perun-notification.properties.j2
    dest: /etc/perun/rpc/perun-notification.properties
    owner: perunrpc
    group: perunrpc
    mode: '0440'

- name: "create perun-extSources.xml"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: "/etc/perun/rpc/perun-extSources.xml"
    owner: perunrpc
    group: perunrpc
    mode: '0440'
  vars:
    findme:
      - "{{ perun_instance_hostname }}/perun-extSources.xml"
      - "perun-extSources.xml"
  notify: "restart perun_rpc"

- name: "create directory /etc/perun/rpc/modules/"
  file:
    path: /etc/perun/rpc/modules
    state: directory
    owner: perunrpc
    group: perunrpc
    mode: '0755'

- name: "create perun modules"
  copy:
    src: "{{ item }}"
    dest: "/etc/perun/rpc/modules/"
    owner: perunrpc
    group: perunrpc
    mode: '0440'
  with_fileglob:
    - "files/{{ perun_instance_hostname }}/modules/*"
  notify: "restart perun_rpc"

- name: "detect local directory perun_rpc_etc/"
  local_action:
    module: stat
    path: "files/{{ perun_instance_hostname }}/perun_rpc_etc/"
  register: rpcetc

- name: "recursive copy from perun_rpc_etc/ to /etc/perun/rpc/"
  when: rpcetc.stat.exists
  copy:
    src: "{{ rpcetc.stat.path }}"
    dest: /etc/perun/rpc/
    owner: perunrpc
    group: perunrpc
    directory_mode: '0550'
    mode: '0440'

- name: "detect local directory perun_rpc_home/"
  local_action:
    module: stat
    path: "files/{{ perun_instance_hostname }}/perun_rpc_home/"
  register: rpchome

- name: "recursive copy from perun_rpc_home/ to /home/perunrpc/"
  when: rpchome.stat.exists
  copy:
    src: "{{ rpchome.stat.path }}"
    dest: /home/perunrpc/
    owner: perunrpc
    group: perunrpc
    directory_mode: '0550'
    mode: '0550'

# used for logs from group synchronizations
- name: "make /var/log/perun/groupsync directory"
  file:
    path: "/var/log/perun/groupsync"
    state: directory
    mode: '0770'
    owner: perunrpc
    group: perunrpc

- name: "create Perun RPC container"
  docker_container:
    name: perun_rpc
    image: "registry.gitlab.ics.muni.cz:443/perun/perun_docker/perun_rpc:{{ perun_rpc_container_version }}"
    pull: yes
    restart_policy: unless-stopped
    mounts:
      - { type: volume, source: perun_logs, target: /var/log/perun }
      - { type: volume, source: perunrpc_home, target: /home/perun }
      - { type: volume, source: perunrpc_etc, target: /etc/perun }
      # bind syslog and journal from container to host, see https://www.projectatomic.io/blog/2016/10/playing-with-docker-logging/
      - { type: bind, source: /dev/log, target: /dev/log }
      - { type: bind, source: /var/run/systemd/journal/socket, target: /var/run/systemd/journal/socket }
    networks_cli_compatible: yes
    networks:
      - name: perun_net
  register: perun_rpc_container

- name: "put container IP into /etc/hosts"
  lineinfile:
    dest: /etc/hosts
    regexp: 'perun_rpc'
    line: "{{ perun_rpc_container.container.NetworkSettings.Networks.perun_net.IPAddress }} perun_rpc"
