---
- name: "Ansible core version check ({{ ansible_version.full }})"
  assert:
    that:
      - ansible_version is defined
      - ansible_version.full is version_compare('2.16.8', '>=')
    msg: "Required version is 2.16.8, this is {{ ansible_version.full }}"
    quiet: true
  tags: always

- name: "Collection community.general version check ({{ lookup('community.general.collection_version', 'community.general') }})"
  assert:
    that:
      - lookup('community.general.collection_version', 'community.general') is version('8.6.2','>=')
    msg: "Required version is 8.6.2, this is {{lookup('community.general.collection_version', 'community.general') }}"
    quiet: true
  tags: always

- name: "Collection community.docker version check ({{ lookup('community.general.collection_version', 'community.docker') }})"
  assert:
    that:
      - lookup('community.general.collection_version', 'community.docker') is version('3.10.4','>=')
    msg: "Required version is 3.10.4, this is {{lookup('community.general.collection_version', 'community.docker') }}"
    quiet: true
  tags: always

- name: "Debian version check ({{ ansible_distribution_major_version }})"
  assert:
    that:
      - ansible_distribution == "Debian"
      - ansible_distribution_major_version is version('11','>=')
    msg: "Required version is 11, this is {{ ansible_distribution }} {{ ansible_distribution_major_version }}"
    quiet: true
  tags: always

- name: "get OS service facts"
  service_facts:
  tags: always

- name: "message-of-the-day setup"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: /etc/motd
  vars:
    findme:
      - "files/message-of-the-day"
      - "motd"
  tags: motd

- name: "TLS certificates setup"
  import_tasks: perun_certs.yml
  tags: perun_certs

- name: "Operating System setup (yubikeys, monitoring)"
  import_tasks: os_setup.yml
  tags: os_setup

- name: "install firewall"
  import_role:
    name: cesnet.firewall
  vars:
    firewall_do_install: true
    firewall_do_config: false

- name: "journald setup"
  import_tasks: perun_journald.yml
  tags: perun_journald

- name: "remote logging setup"
  import_role:
    name: cesnet.remote_logging
  vars:
    remote_logging_hostname: "{{ etc_hostname_hostname }}"
    remote_logging_enabled: "{{ perun_remote_logging_enabled }}"
    remote_logging_server: "{{ perun_remote_logging_server }}"
    remote_logging_protocol: "{{ perun_remote_logging_protocol }}"
    remote_logging_port: "{{ perun_remote_logging_port }}"
    remote_logging_conf: "{{ perun_remote_logging_conf }}"
    remote_logging_filter: "{{ perun_remote_logging_filter }}"
    remote_logging_enable_disk_buffer: "{{ perun_remote_logging_enable_disk_buffer }}"

- name: "creation of users perun, peruneng, etc."
  import_tasks: perun_users.yml
  tags: perun_users

- name: "Docker and Portainer setup"
  import_role:
    name: cesnet.docker
  vars:
    docker_packages_hold: true
    docker_registries:
      - url: gitlab-registry.cesnet.cz
        username: gitlab-deploy-token-712
        password: gldt-TcDbEs8Yj-cX4KPmM1Wq
    docker_local_network_name: perun_net
    docker_portainer_install: true
    docker_portainer_version: "{{ perun_portainer_version }}"
    docker_portainer_admin_password_file: "{{ perun_certs_dir }}/portainer_admin_password.txt"
    docker_portainer_admin_password: "{{ perun_portainer_admin_password }}"
    docker_portainer_admin_password_file_owner: root
    docker_portainer_admin_password_file_group: perun
    docker_portainer_use_certbot_certificates: "{{ perun_use_certbot_certificates }}"
    docker_portainer_fullchain_file: "{{ perun_certificate_fullchain_file }}"
    docker_portainer_privkey_file: "{{ perun_certificate_key_file }}"

- name: "Postgres local server setup"
  when: perun_postgres_local
  include_tasks:
    file: postgres_local.yml
    apply:
      tags:
        - postgresql
  tags: postgresql

- name: "PostgreSQL remote server setup (AWS)"
  when: not perun_postgres_local
  include_tasks:
    file: postgres_remote.yml
    apply:
      tags:
        - postgresql
  tags: postgresql

- name: "Postgres perun-specific setup"
  include_tasks:
    file: postgres_perun.yml
    apply:
      tags:
        - postgres_perun
  tags: postgres_perun

- name: "compute firewall rules"
  tags: firewall
  block:
    - name: "get perun_net info"
      docker_network_info:
        name: perun_net
      register: perun_net_info
    - name: "compute facts"
      set_fact:
        perun_firewall_perun_net_related_rules:
          - { port: 25, ipv4: "{{ perun_net_info.network.IPAM.Config[0].Subnet }}", comment: "accept SMTP from docker subnet" }
          - { port: 389, ipv4: "{{ perun_net_info.network.IPAM.Config[0].Subnet }}", comment: "accept non-encrypted ldap from docker subnet"}
          - { port: 5432, ipv4: "{{ perun_net_info.network.IPAM.Config[0].Subnet }}", comment: "accept postgres from docker subnet" }

- name: "set firewall rules"
  import_role:
    name: cesnet.firewall
  vars:
    firewall_do_install: false
    firewall_do_config: true
    firewall_open_tcp_ports: "{{ perun_firewall_open_tcp_ports + perun_firewall_perun_net_related_rules + site_specific_open_tcp_ports }}"
    firewall_docker_rules: "{{ perun_firewall_docker_rules }}"

- name: "sendmail setup for Dockerized environment (legacy)"
  when: not perun_smtp_use_msmtp
  include_role:
    name: cesnet.sendmail_for_docker
    apply: { tags: [ 'sendmail_for_docker'] }
  tags: [ 'sendmail_for_docker']
  vars:
    sendmail_for_docker_hostname: "{{ etc_hostname_hostname }}"
    sendmail_for_docker_bridge_network_name: perun_net
    sendmail_for_docker_config: "{{ perun_sendmail_config }}"

- name: "set up /etc/aliases for sendmail"
  when: not perun_smtp_use_msmtp
  loop:
    - postmaster
    - postgres
    - perun
    - perunrpc
    - peruneng
    - perunldc
  lineinfile:
    path: /etc/aliases
    regexp: "^{{ item }}:"
    line: "{{ item }}: root"
    state: present
  notify: "run newaliases"
  tags: [ 'aliases']

- name: "msmtp MTA setup (forwarding emails to a SMTP relay)"
  when: perun_smtp_use_msmtp
  include_role:
    name: cesnet.msmtp
    apply: { tags: [ 'msmtp'] }
  tags: [ 'msmtp']
  vars:
    msmtp_listen_interface: 0.0.0.0
    msmtp_config: "{{ perun_msmtp_config }}"

- name: "OpenLDAP directory server installation"
  include_role:
    name: cesnet.openldap
    apply:
      tags:
        - perun_ldap
  when: perun_ldap_local and perun_ldap_implementation=="openldap"
  vars:
    ldap_domain: "{{ perun_ldap_domain }}"
    ldap_top_organization: perun
    ldap_data_password: "{{ perun_ldap_data_password }}"
    ldap_config_password: "{{ perun_ldap_config_password }}"
    ldap_hold_package: yes
    ldap_certificate_file: "{{ perun_certificate_file }}"
    ldap_certificate_key_file: "{{ perun_certificate_key_file }}"
    ldap_certificate_chain_file: "{{ perun_certificate_chain_file }}"
    ldap_access_rules_set: no
    ldap_size_limit: "{{ perun_ldap_size_limit }}"
    ldap_master_replica: "{{ perun_ldap_master_replica }}"
    ldap_replication_password: "{{ perun_ldap_replication_password }}"
    ldap_users: "{{ perun_ldap_users }}"
    ldap_tls_cipher_suite: "{{ 'SECURE192:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3' if perun_use_certbot_certificates else 'SECURE128:+SECURE192:-VERS-ALL:+VERS-TLS1.2:+VERS-TLS1.3:-AES-256-CBC:-AES-192-CBC:-AES-128-CBC:-3DES-CBC:-DES-CBC' }}"
  tags:
    - perun_ldap

- name: "LDAP 389Directory server installation"
  include_role:
    name: cesnet.ds389
    apply:
      tags:
        - perun_ldap
  when: perun_ldap_local and perun_ldap_implementation=="ds389"
  vars:
    ldap_ds389_domain: "{{ perun_ldap_domain }}"
    ldap_ds389_server_name: "{{ perun_ldap_ds389_server_name }}"
    ldap_ds389_instance_name: "{{ perun_ldap_ds389_instance_name}}"
    ldap_ds389_root_pass: "{{ perun_ldap_data_password }}"
    ldap_ds389_certificate_file: "{{ perun_certificate_file }}"
    ldap_ds389_certificate_key_file: "{{ perun_certificate_key_file }}"
    ldap_ds389_certificate_chain_file: "{{ perun_certificate_chain_file }}"
    ldap_ds389_repl_pass: "{{ perun_ldap_replication_password }}"
    ldap_ds389_set_up_supplier_replica: "{{ perun_ldap_master_replica }}"
    ldap_ds389_replication_argument_name: "{{ perun_ldap_ds389_replication_argument_name }}"
    ldap_ds389_replica_consumer_host: "{{ perun_ldap_ds389_replica_consumer_host }}"
    ldap_ds389_pass_through_authentication: "{{ ldap_pass_through_authentication if ldap_pass_through_authentication is defined else false }}"
  tags:
    - perun_ldap

- name: "LDAP Perun specific settings"
  when: perun_ldap_local
  include_role:
    name: cesnet.perun_ldap_config
    apply:
      tags:
        - perun_ldap
        - perun_config
        - perun_ldap_config
  tags:
    - perun_ldap
    - perun_config
    - perun_ldap_config

- name: "setup of Docker data volumes for Perun containers"
  import_tasks: perun_volumes.yml
  tags: perun_volumes

- name: "prepare vars for perun_config"
  import_tasks: perun_config.yml
  tags:
    - perun_config
    - perun_rpc
    - perun_ldapc
    - perun_apache

- name: "group-specific tasks before perun config"
  block:
    - name: "find files with group specific tasks"
      loop: "{{ group_names }}"
      local_action:
        module: stat
        path: "files/{{ item }}/{{ item }}_group_specific_tasks_before.yml"
      register: group_specific_tasks_before
    - name: "execute group-specific tasks"
      loop: "{{ group_specific_tasks_before.results }}"
      loop_control:
        label: "{{ item.invocation.module_args.path }}"
      when: item.stat.exists
      include_tasks:
        file: "{{ item.stat.path }}"
        apply:
          tags:
            - group_specific
            - group_specific_before
  tags:
    - group_specific
    - group_specific_before

- name: "site-specific tasks before perun config"
  when: perun_site_specific_tasks_before is defined
  include_tasks:
    file: "files/{{ perun_instance_hostname}}/{{ perun_site_specific_tasks_before }}"
    apply:
      tags:
        - site_specific
        - site_specific_before
  tags:
    - site_specific
    - site_specific_before

- name: "setup of Perun-to-Perun synchronization"
  when: perun_sync_enabled
  include_tasks:
    file: perun_sync.yml
    apply:
      tags:
        - perun_sync
  tags:
    - perun_sync

- name: "perun rpc setup"
  import_tasks: perun_rpc.yml
  tags:
    - perun_rpc
    - perun_config

- name: "perun engine setup"
  import_tasks: perun_engine.yml
  tags:
    - perun_engine
    - perun_config

- name: "perun ldapc setup"
  include_tasks:
    file: perun_ldapc.yml
    apply:
      tags:
        - perun_ldapc
        - perun_config
  tags:
    - perun_ldapc
    - perun_config

- name: "perun auditlogger setup"
  include_tasks:
    file: perun_auditlogger.yml
    apply:
      tags:
        - perun_auditlogger
        - perun_config
  tags:
    - perun_auditlogger
    - perun_config

- name: "perun apache setup"
  import_tasks: perun_apache.yml
  tags:
    - perun_apache
    - perun_config

- name: "perun CLI setup"
  import_tasks: perun_cli.yml
  tags:
    - perun_cli
    - perun_config

- name: "syslog setup after containers"
  import_tasks: perun_syslog_containers.yml
  tags: perun_syslog


- name: "site-specific tasks after perun config"
  when: perun_site_specific_tasks_after is defined
  include_tasks:
    file: "files/{{ perun_instance_hostname}}/{{ perun_site_specific_tasks_after }}"
    apply:
      tags:
        - site_specific
        - site_specific_after
  tags:
    - site_specific
    - site_specific_after
