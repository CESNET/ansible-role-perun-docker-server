- name: "create perun-engine.properties"
  template:
    src: perun-engine.properties.j2
    dest: /etc/perun/engine/perun-engine.properties
    owner: root
    group: peruneng
    mode: 0440
  notify: "restart perun_engine"

- name: "create logback-engine.xml"
  template:
    src: logback-engine.xml.j2
    dest: /etc/perun/engine/logback-engine.xml
    owner: root
    group: peruneng
    mode: 0440

- name: "create perun-engine (contains password)"
  template:
    src: perun-engine.j2
    dest: /etc/perun/engine/perun-engine
    owner: root
    group: peruneng
    mode: 0440
  notify: "restart perun_engine"

- name: "create directory .ssh"
  file:
    state: directory
    path: /home/peruneng/.ssh
    owner: peruneng
    group: peruneng
    mode: 0700

- name: "create ssh private key {{ perun_engine_ssh_privkey_file }} for accessing slaves"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: "/home/peruneng/.ssh/{{ perun_engine_ssh_privkey_file }}"
    owner: peruneng
    group: peruneng
    mode: 0600
  vars:
    findme:
      - "{{ perun_instance_hostname }}/{{ perun_engine_ssh_privkey_file }}"
      - "{{ perun_engine_ssh_privkey_file }}"

- name: "create ssh public key {{ perun_engine_ssh_pubkey_file }} for accessing slaves"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: "/home/peruneng/.ssh/{{ perun_engine_ssh_pubkey_file }}"
    owner: peruneng
    group: peruneng
    mode: 0644
  vars:
    findme:
      - "{{ perun_instance_hostname }}/{{ perun_engine_ssh_pubkey_file }}"
      - "{{ perun_engine_ssh_pubkey_file }}"

- name: "detect local directory"
  local_action:
    module: stat
    path: "files/{{ perun_instance_hostname }}/services"
  register: hs

- name: "recursive copy to /etc/perun/engine/services"
  when: hs.stat.exists
  copy:
    src: "{{ hs.stat.path }}"
    dest: /etc/perun/engine/
    owner: root
    group: peruneng
    directory_mode: '0550'
    mode: '0440'

- name: "install rsync for synchronization"
  apt:
    name: rsync
    state: present

- name: "create /etc/perun/engine/(gen|send)-local"
  loop: [ 'gen-local', 'send-local']
  file:
    path: "/etc/perun/engine/{{ item }}"
    state: directory
    owner: root
    group: peruneng
    mode: '0550'

- name: "synchronize (gen|send)-local"
  loop: [ 'gen-local', 'send-local']
  synchronize:
    src: "files/{{ perun_instance_hostname }}/{{ item }}/"
    dest: "/etc/perun/engine/{{ item }}/"
    delete: yes
    archive: no
    recursive: yes
    checksum: yes
  notify: "restart perun_engine"

- name: "find (gen|send)-local files"
  find:
    paths:
      - /etc/perun/engine/gen-local
      - /etc/perun/engine/send-local
    file_type: file
  register: localfiles

- name: "set owner and permissions for (gen|send)-local files"
  file:
    path: "{{ item.path }}"
    owner: root
    group: peruneng
    mode: '0750'
  loop: "{{ localfiles.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: "make key, cert and chain for generic_send script with curl"
  block:
    - name: "create engine ssl dir"
      file:
        state: directory
        path: /etc/perun/engine/ssl
        owner: root
        group: peruneng
        mode: '0550'

    - name: "copy host certificates for generic_send"
      copy:
        remote_src: yes
        src: "/etc/perun/ssl/{{ item.src }}"
        dest: "/etc/perun/engine/ssl/{{ item.dest }}"
        owner: root
        group: peruneng
        mode: '0550'
      loop:
        - { src: "hostkey.pem", dest: "perun-send.key" }
        - { src: "hostcert.pem", dest: "perun-send.pem" }
        - { src: "hostchain.pem", dest: "perun-send.chain" }

- name: "detect local directory perun_engine_etc/"
  local_action:
    module: stat
    path: "files/{{ perun_instance_hostname }}/perun_engine_etc/"
  register: engineetc

- name: "recursive copy from perun_engine_etc/ to /etc/perun/engine/"
  when: engineetc.stat.exists
  copy:
    src: "{{ engineetc.stat.path }}"
    dest: /etc/perun/engine/
    owner: root
    group: peruneng
    directory_mode: '0550'
    mode: '0440'

- name: "create expected directories in perun home"
  file:
    path: "{{ item.dir }}"
    state: directory
    owner: peruneng
    group: peruneng
    mode: "{{ item.mode }}"
  loop:
    - { dir: "/home/peruneng/gen/spool", mode: '0755' }
    - { dir: "/home/peruneng/gen/logs", mode: '0755' }
    - { dir: "/home/peruneng/send/spool", mode: '0755' }
    - { dir: "/home/peruneng/send/logs", mode: '0755' }
    - { dir: "/home/peruneng/cache", mode: '0755' }

- name: "list normal engine mounts"
  set_fact:
    engine_mounts:
      - { type: volume, source: perun_logs, target: /var/log/perun }
      - { type: volume, source: peruneng_home, target: /home/perun }
      - { type: volume, source: peruneng_etc,  target: /etc/perun }
      # mount tmpfs to /tmp for faster performance https://docs.docker.com/storage/tmpfs/
      - { type: tmpfs, target: /tmp }
      # bind syslog and journal from container to host, see https://www.projectatomic.io/blog/2016/10/playing-with-docker-logging/
      - { type: bind, source: /dev/log, target: /dev/log }
      - { type: bind, source: /var/run/systemd/journal/socket, target: /var/run/systemd/journal/socket }

- name: "add perun_engine_mounts_additional to engine mounts"
  when: perun_engine_mounts_additional|length > 0
  set_fact:
    engine_mounts: "{{ engine_mounts + perun_engine_mounts_additional }}"

- name: "create dirs for gen/send-local-dev"
  loop:
    - gen-local-dev
    - send-local-dev
  file:
    state: directory
    path: "/home/peruneng/{{ item }}"
    owner: peruneng
    group: peruneng
    mode: '0750'

- name: "create /home/peruneng/.bash_profile"
  copy:
    dest: /home/peruneng/.bash_profile
    owner: peruneng
    group: peruneng
    mode: '0550'
    content: |2
      # set environment
      source /etc/perun/perun-engine
      
      # replace scripts from gen-local
      if [[ -n $(ls -A /etc/perun/gen-local) ]] ; then
        cd /etc/perun/gen-local
        for i in * ; do
          echo "replacing from gen-local/$i"
          cp $i "/opt/perun-engine/gen/$i"
        done
      fi

      # replace scripts from gen-local-dev
      if [[ -n $(ls -A /home/perun/gen-local-dev) ]] ; then
        cd /home/perun/gen-local-dev
        for i in * ; do
          echo "replacing from gen-local-dev/$i"
          cp $i "/opt/perun-engine/gen/$i"
        done
      fi
      
      # replace scripts from send-local
      if [[ -n $(ls -A /etc/perun/send-local) ]] ; then
        cd /etc/perun/send-local
        for i in * ; do
          echo "replacing from send-local/$i"
          cp $i "/opt/perun-engine/send/$i"
        done
      fi

      # replace scripts from send-local-dev
      if [[ -n $(ls -A /home/perun/send-local-dev) ]] ; then
        cd /home/perun/send-local-dev
        for i in * ; do
          echo "replacing from send-local-dev/$i"
          cp $i "/opt/perun-engine/send/$i"
        done
      fi
      
      # go home
      cd /home/perun

- name: "{{ 'create' if perun_engine_enabled else 'remove' }} Perun engine container"
  docker_container:
    name: perun_engine
    hostname: perun_engine
    image: "registry.gitlab.ics.muni.cz:443/perun/perun_docker/perun_engine:{{ perun_engine_container_version }}"
    pull: yes
    restart_policy: unless-stopped
    mounts: "{{ engine_mounts}}"
    networks_cli_compatible: yes
    networks:
      - name: perun_net
    network_mode: perun_net
    etc_hosts: "{{ perun_containers_etc_hosts }}"
    container_default_behavior: no_defaults
    state: "{{ 'started' if perun_engine_enabled else 'absent' }}"
  register: perun_engine_container

- name: "put container IP into /etc/hosts"
  when: perun_engine_enabled
  lineinfile:
    dest: /etc/hosts
    regexp: 'perun_engine'
    line: "{{ perun_engine_container.container.NetworkSettings.Networks.perun_net.IPAddress }} perun_engine"

- name: "create /usr/local/bin/perun-engine-test"
  copy:
    dest: /usr/local/bin/perun-engine-test
    owner: perun
    group: perun
    mode: '0550'
    content: |
      #!/bin/bash
      docker run -it --rm --name engine_test_$$ --hostname engine_test_$$ \
        --network perun_net \
      {% for m in engine_mounts %}
        --mount type={{ m.type }},target={{ m.target }}{% if m.source is defined %},source={{ m.source }}{% endif %} \
      {% endfor %}
      {% for host, ip in perun_containers_etc_hosts.items() %}
        --add-host {{ host }}:{{ ip }} \
      {% endfor %}
        -w /home/perun \
        registry.gitlab.ics.muni.cz:443/perun/perun_docker/perun_engine:{{ perun_engine_container_version }} /bin/bash --login

