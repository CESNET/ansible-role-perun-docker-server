- name: "create perun-engine.properties"
  template:
    src: perun-engine.properties.j2
    dest: /etc/perun/engine/perun-engine.properties
    owner: peruneng
    group: peruneng
    mode: 0440
  notify: "restart perun_engine"

- name: "create logback-engine.xml"
  template:
    src: logback-engine.xml.j2
    dest: /etc/perun/engine/logback-engine.xml
    owner: peruneng
    group: peruneng
    mode: 0440

- name: "create perun-engine (contains password)"
  template:
    src: perun-engine.j2
    dest: /etc/perun/engine/perun-engine
    owner: peruneng
    group: peruneng
    mode: 0440
  notify: "restart perun_engine"

- name: "create directory .ssh"
  file:
    state: directory
    path: /home/peruneng/.ssh
    owner: peruneng
    group: peruneng
    mode: 0700

- name: "create ssh private key {{ perun_engine_ssh_privkey_file }} for accessing slaves"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: "/home/peruneng/.ssh/{{ perun_engine_ssh_privkey_file }}"
    owner: peruneng
    group: peruneng
    mode: 0600
  vars:
    findme:
      - "{{ perun_instance_hostname }}/{{ perun_engine_ssh_privkey_file }}"
      - "{{ perun_engine_ssh_privkey_file }}"

- name: "create ssh public key {{ perun_engine_ssh_pubkey_file }} for accessing slaves"
  copy:
    src: "{{ lookup('first_found', findme) }}"
    dest: "/home/peruneng/.ssh/{{ perun_engine_ssh_pubkey_file }}"
    owner: peruneng
    group: peruneng
    mode: 0644
  vars:
    findme:
      - "{{ perun_instance_hostname }}/{{ perun_engine_ssh_pubkey_file }}"
      - "{{ perun_engine_ssh_pubkey_file }}"

- name: "detect local directory"
  local_action:
    module: stat
    path: "files/{{ perun_instance_hostname }}/services"
  register: hs

- name: "recursive copy to /etc/perun/engine/services"
  when: hs.stat.exists
  copy:
    src: "{{ hs.stat.path }}"
    dest: /etc/perun/engine/
    owner: peruneng
    group: peruneng
    directory_mode: '0550'
    mode: '0440'

- name: "create /etc/perun/engine/gen-local"
  file:
    path: /etc/perun/engine/gen-local
    state: directory
    owner: peruneng
    group: peruneng
    mode: '0550'

- name: "copy gen-local"
  copy:
    src: "{{ item }}"
    dest: /etc/perun/engine/gen-local/
    owner: peruneng
    group: peruneng
    mode: '0550'
  with_fileglob:
    - "files/{{ perun_instance_hostname }}/gen-local/*"
  notify: "restart perun_engine"

- name: "create /etc/perun/engine/send-local"
  file:
    path: /etc/perun/engine/send-local
    state: directory
    owner: peruneng
    group: peruneng
    mode: '0550'

- name: "copy send-local"
  copy:
    src: "{{ item }}"
    dest: /etc/perun/engine/send-local/
    owner: peruneng
    group: peruneng
    mode: '0550'
  with_fileglob:
    - "files/{{ perun_instance_hostname }}/send-local/*"
  notify: "restart perun_engine"

- name: "make key, cert and chain for generic_send script with curl"
  block:
    - name: "create engine ssl dir"
      file:
        state: directory
        path: /etc/perun/engine/ssl
        owner: peruneng
        group: peruneng
        mode: '0550'

    - name: "use certbot certificates for generic_send"
      when: perun_use_certbot_certificates
      copy:
        remote_src: yes
        src: "/etc/letsencrypt/live/{{ perun_rpc_hostname }}/privkey.pem"
        dest: /etc/perun/engine/ssl/perun-send.key
        owner: peruneng
        group: peruneng
        mode: '0550'
      notify:
        - "restart perun_engine"
      loop:
        - { src: "privkey.pem", dest: "perun-send.key" }
        - { src: "cert.pem", dest: "perun-send.pem" }
        - { src: "chain.pem", dest: "perun-send.chain" }

    - name: "use issued certificates for generic_send"
      when: not perun_use_certbot_certificates
      copy:
        src: "{{ perun_instance_hostname }}/{{ item.src }}"
        dest: "/etc/perun/engine/ssl/{{ item.dest }}"
        owner: peruneng
        group: peruneng
        mode: '0550'
      notify:
        - "restart perun_engine"
      loop:
        - { src: "hostkey.pem", dest: "perun-send.key" }
        - { src: "hostcert.pem", dest: "perun-send.pem" }
        - { src: "hostchain.pem", dest: "perun-send.chain" }

- name: "create Perun engine container"
  docker_container:
    name: perun_engine
    image: "registry.gitlab.ics.muni.cz:443/perun/perun_docker/perun_engine:{{ perun_engine_container_version }}"
    pull: yes
    restart_policy: unless-stopped
    mounts:
      - { type: volume, source: perun_logs, target: /var/log/perun }
      - { type: volume, source: peruneng_home, target: /home/perun }
      - { type: volume, source: peruneng_etc,  target: /etc/perun }
      # bind syslog and journal from container to host, see https://www.projectatomic.io/blog/2016/10/playing-with-docker-logging/
      - { type: bind, source: /dev/log, target: /dev/log }
      - { type: bind, source: /var/run/systemd/journal/socket, target: /var/run/systemd/journal/socket }
    networks_cli_compatible: yes
    networks:
      - name: perun_net
  register: perun_engine_container

- name: "put container IP into /etc/hosts"
  lineinfile:
    dest: /etc/hosts
    regexp: 'perun_engine'
    line: "{{ perun_engine_container.container.NetworkSettings.Networks.perun_net.IPAddress }} perun_engine"
